;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/15/2025 12:15:57 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2930      	GOTO       304
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A8      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A9      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A3      	MOVWF      35
0x000D	0x087B      	MOVF       R11, 0
0x000E	0x00A2      	MOVWF      34
0x000F	0x087C      	MOVF       R12, 0
0x0010	0x00A1      	MOVWF      33
0x0011	0x087D      	MOVF       R13, 0
0x0012	0x00A0      	MOVWF      32
;PIC1.c,43 :: 		void interrupt() {
;PIC1.c,44 :: 		if (INTCON & 0x02) {  // External Interrupt
0x0013	0x1C8B      	BTFSS      INTCON, 1
0x0014	0x2835      	GOTO       L_interrupt0
;PIC1.c,45 :: 		while (PORTB & 0x01) {  // Trigger active
L_interrupt1:
0x0015	0x1C06      	BTFSS      PORTB, 0
0x0016	0x2834      	GOTO       L_interrupt2
;PIC1.c,46 :: 		stop_car(); // Stop the car if the trigger is active
0x0017	0x20DD      	CALL       _stop_car
;PIC1.c,47 :: 		delay_ms(500);
0x0018	0x3006      	MOVLW      6
0x0019	0x00FB      	MOVWF      R11
0x001A	0x3013      	MOVLW      19
0x001B	0x00FC      	MOVWF      R12
0x001C	0x30AD      	MOVLW      173
0x001D	0x00FD      	MOVWF      R13
L_interrupt3:
0x001E	0x0BFD      	DECFSZ     R13, 1
0x001F	0x281E      	GOTO       L_interrupt3
0x0020	0x0BFC      	DECFSZ     R12, 1
0x0021	0x281E      	GOTO       L_interrupt3
0x0022	0x0BFB      	DECFSZ     R11, 1
0x0023	0x281E      	GOTO       L_interrupt3
0x0024	0x0000      	NOP
0x0025	0x0000      	NOP
;PIC1.c,48 :: 		drive_backward();
0x0026	0x2124      	CALL       _drive_backward
;PIC1.c,49 :: 		delay_ms(700);
0x0027	0x3008      	MOVLW      8
0x0028	0x00FB      	MOVWF      R11
0x0029	0x301B      	MOVLW      27
0x002A	0x00FC      	MOVWF      R12
0x002B	0x3027      	MOVLW      39
0x002C	0x00FD      	MOVWF      R13
L_interrupt4:
0x002D	0x0BFD      	DECFSZ     R13, 1
0x002E	0x282D      	GOTO       L_interrupt4
0x002F	0x0BFC      	DECFSZ     R12, 1
0x0030	0x282D      	GOTO       L_interrupt4
0x0031	0x0BFB      	DECFSZ     R11, 1
0x0032	0x282D      	GOTO       L_interrupt4
;PIC1.c,50 :: 		}
0x0033	0x2815      	GOTO       L_interrupt1
L_interrupt2:
;PIC1.c,51 :: 		INTCON &= ~0x02;  // Clear External Interrupt flag
0x0034	0x108B      	BCF        INTCON, 1
;PIC1.c,52 :: 		}
L_interrupt0:
;PIC1.c,53 :: 		}
L_end_interrupt:
L__interrupt40:
0x0035	0x0823      	MOVF       35, 0
0x0036	0x00F0      	MOVWF      R0
0x0037	0x0822      	MOVF       34, 0
0x0038	0x00FB      	MOVWF      R11
0x0039	0x0821      	MOVF       33, 0
0x003A	0x00FC      	MOVWF      R12
0x003B	0x0820      	MOVF       32, 0
0x003C	0x00FD      	MOVWF      R13
0x003D	0x0829      	MOVF       ___savePCLATH, 0
0x003E	0x008A      	MOVWF      PCLATH
0x003F	0x0E28      	SWAPF      ___saveSTATUS, 0
0x0040	0x0083      	MOVWF      STATUS
0x0041	0x0EFF      	SWAPF      R15, 1
0x0042	0x0E7F      	SWAPF      R15, 0
0x0043	0x0009      	RETFIE
; end of _interrupt
_Mul_8X8_U:
;__Lib_Math.c,103 :: 		
;__Lib_Math.c,108 :: 		
0x0044	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,109 :: 		
0x0045	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,110 :: 		
0x0046	0x0870      	MOVF       R0, 0
;__Lib_Math.c,111 :: 		
0x0047	0x00F1      	MOVWF      R1
;__Lib_Math.c,112 :: 		
0x0048	0x01F0      	CLRF       R0
;__Lib_Math.c,113 :: 		
0x0049	0x3008      	MOVLW      8
;__Lib_Math.c,114 :: 		
0x004A	0x00FC      	MOVWF      R12
;__Lib_Math.c,115 :: 		
0x004B	0x0871      	MOVF       R1, 0
;__Lib_Math.c,116 :: 		
0x004C	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,117 :: 		
0x004D	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,118 :: 		
0x004E	0x2853      	GOTO       $+5
;__Lib_Math.c,119 :: 		
0x004F	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,120 :: 		
0x0050	0x284C      	GOTO       $-4
;__Lib_Math.c,121 :: 		
0x0051	0x01F1      	CLRF       R1
;__Lib_Math.c,122 :: 		
0x0052	0x3400      	RETLW      0
;__Lib_Math.c,123 :: 		
0x0053	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,124 :: 		
0x0054	0x2858      	GOTO       $+4
;__Lib_Math.c,125 :: 		
0x0055	0x0CF4      	RRF        R4, 1
;__Lib_Math.c,126 :: 		
0x0056	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,127 :: 		
0x0057	0x07F1      	ADDWF      R1, 1
;__Lib_Math.c,128 :: 		
0x0058	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,129 :: 		
0x0059	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,130 :: 		
0x005A	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,131 :: 		
0x005B	0x2855      	GOTO       $-6
;__Lib_Math.c,133 :: 		
;__Lib_Math.c,134 :: 		
L_end_Mul_8X8_U:
0x005C	0x0008      	RETURN
; end of _Mul_8X8_U
_set_pwm_duty_cycle:
;PIC1.c,83 :: 		void set_pwm_duty_cycle(unsigned char duty) {
;PIC1.c,84 :: 		unsigned int duty_cycle = (duty * 10); // Scale 0-100 to 0-1000
0x005D	0x1283      	BCF        STATUS, 5
0x005E	0x1303      	BCF        STATUS, 6
0x005F	0x0835      	MOVF       FARG_set_pwm_duty_cycle_duty, 0
0x0060	0x00F0      	MOVWF      R0
0x0061	0x300A      	MOVLW      10
0x0062	0x00F4      	MOVWF      R4
0x0063	0x2044      	CALL       _Mul_8X8_U
;PIC1.c,85 :: 		CCPR1L = duty_cycle >> 2;              // Upper 8 bits
0x0064	0x0870      	MOVF       R0, 0
0x0065	0x00F2      	MOVWF      R2
0x0066	0x0871      	MOVF       R0+1, 0
0x0067	0x00F3      	MOVWF      R2+1
0x0068	0x0CF3      	RRF        R2+1, 1
0x0069	0x0CF2      	RRF        R2, 1
0x006A	0x13F3      	BCF        R2+1, 7
0x006B	0x0CF3      	RRF        R2+1, 1
0x006C	0x0CF2      	RRF        R2, 1
0x006D	0x13F3      	BCF        R2+1, 7
0x006E	0x0872      	MOVF       R2, 0
0x006F	0x0095      	MOVWF      CCPR1L
;PIC1.c,86 :: 		CCP1CON = (CCP1CON & 0xCF) | ((duty_cycle & 0x03) << 4); // Lower 2 bits
0x0070	0x30CF      	MOVLW      207
0x0071	0x0517      	ANDWF      CCP1CON, 0
0x0072	0x00F3      	MOVWF      R3
0x0073	0x3003      	MOVLW      3
0x0074	0x0570      	ANDWF      R0, 0
0x0075	0x00F2      	MOVWF      R2
0x0076	0x0872      	MOVF       R2, 0
0x0077	0x00F0      	MOVWF      R0
0x0078	0x0DF0      	RLF        R0, 1
0x0079	0x1070      	BCF        R0, 0
0x007A	0x0DF0      	RLF        R0, 1
0x007B	0x1070      	BCF        R0, 0
0x007C	0x0DF0      	RLF        R0, 1
0x007D	0x1070      	BCF        R0, 0
0x007E	0x0DF0      	RLF        R0, 1
0x007F	0x1070      	BCF        R0, 0
0x0080	0x0870      	MOVF       R0, 0
0x0081	0x0473      	IORWF      R3, 0
0x0082	0x0097      	MOVWF      CCP1CON
;PIC1.c,87 :: 		}
L_end_set_pwm_duty_cycle:
0x0083	0x0008      	RETURN
; end of _set_pwm_duty_cycle
_init_ADC:
;PIC1.c,62 :: 		void init_ADC() {
;PIC1.c,63 :: 		TRISA = 0xFF;        // Set PORTA as input for analog sensors
0x0084	0x30FF      	MOVLW      255
0x0085	0x1683      	BSF        STATUS, 5
0x0086	0x1303      	BCF        STATUS, 6
0x0087	0x0085      	MOVWF      TRISA
;PIC1.c,64 :: 		TRISB = 0x09;        // RB3 as input (flame detector), others as output
0x0088	0x3009      	MOVLW      9
0x0089	0x0086      	MOVWF      TRISB
;PIC1.c,65 :: 		TRISC = 0x00;        // RC pins as outputs (motors, reverse LED)
0x008A	0x0187      	CLRF       TRISC
;PIC1.c,66 :: 		TRISD = 0x51;        // RD4 and RD6 as inputs (motion and extra buzzer)
0x008B	0x3051      	MOVLW      81
0x008C	0x0088      	MOVWF      TRISD
;PIC1.c,67 :: 		PORTB = 0x00;        // Initialize PORTB to 0 (LEDs off)
0x008D	0x1283      	BCF        STATUS, 5
0x008E	0x0186      	CLRF       PORTB
;PIC1.c,68 :: 		PORTC = 0x00;        // Initialize PORTC to 0 (motors off)
0x008F	0x0187      	CLRF       PORTC
;PIC1.c,69 :: 		PORTD = 0x00;        // Initialize PORTD to 0 (buzzers off)
0x0090	0x0188      	CLRF       PORTD
;PIC1.c,71 :: 		ADCON1 = 0x06;  // Configure analog inputs
0x0091	0x3006      	MOVLW      6
0x0092	0x1683      	BSF        STATUS, 5
0x0093	0x009F      	MOVWF      ADCON1
;PIC1.c,72 :: 		ADCON0 = 0x01;  // Enable ADC and select channel 0
0x0094	0x3001      	MOVLW      1
0x0095	0x1283      	BCF        STATUS, 5
0x0096	0x009F      	MOVWF      ADCON0
;PIC1.c,73 :: 		}
L_end_init_ADC:
0x0097	0x0008      	RETURN
; end of _init_ADC
_init_PWM:
;PIC1.c,75 :: 		void init_PWM() {
;PIC1.c,76 :: 		TRISC &= ~(0x04);  // Set RC2 as output for PWM
0x0098	0x1683      	BSF        STATUS, 5
0x0099	0x1303      	BCF        STATUS, 6
0x009A	0x1107      	BCF        TRISC, 2
;PIC1.c,77 :: 		PR2 = 249;         // Set PWM period for ~1 kHz frequency
0x009B	0x30F9      	MOVLW      249
0x009C	0x0092      	MOVWF      PR2
;PIC1.c,78 :: 		T2CON = 0x07;      // Enable Timer2 with 1:16 prescaler
0x009D	0x3007      	MOVLW      7
0x009E	0x1283      	BCF        STATUS, 5
0x009F	0x0092      	MOVWF      T2CON
;PIC1.c,79 :: 		CCP1CON = 0x0C;    // Set CCP1 to PWM mode
0x00A0	0x300C      	MOVLW      12
0x00A1	0x0097      	MOVWF      CCP1CON
;PIC1.c,80 :: 		TMR2 = 1;        // Turn on Timer2
0x00A2	0x3001      	MOVLW      1
0x00A3	0x0091      	MOVWF      TMR2
;PIC1.c,81 :: 		}
L_end_init_PWM:
0x00A4	0x0008      	RETURN
; end of _init_PWM
_init_interrupts:
;PIC1.c,55 :: 		void init_interrupts() {
;PIC1.c,56 :: 		INTCON = 0x00;       // Clear INTCON register
0x00A5	0x018B      	CLRF       INTCON
;PIC1.c,57 :: 		INTE_bit = 1;            // Enable external interrupt on INT0
0x00A6	0x160B      	BSF        INTE_bit, BitPos(INTE_bit+0)
;PIC1.c,58 :: 		INTEDG_bit = 1;          // Set INT0 to trigger on rising edge
0x00A7	0x1683      	BSF        STATUS, 5
0x00A8	0x1303      	BCF        STATUS, 6
0x00A9	0x1701      	BSF        INTEDG_bit, BitPos(INTEDG_bit+0)
;PIC1.c,59 :: 		GIE_bit = 1;             // Enable global interrupts
0x00AA	0x178B      	BSF        GIE_bit, BitPos(GIE_bit+0)
;PIC1.c,60 :: 		}
L_end_init_interrupts:
0x00AB	0x0008      	RETURN
; end of _init_interrupts
_ADC_Read:
;PIC1.c,94 :: 		unsigned int ADC_Read(unsigned char channel) {
;PIC1.c,95 :: 		ADCON0 = (ADCON0 & 0xC5) | (channel << 3);  // Select channel
0x00AC	0x30C5      	MOVLW      197
0x00AD	0x1283      	BCF        STATUS, 5
0x00AE	0x1303      	BCF        STATUS, 6
0x00AF	0x051F      	ANDWF      ADCON0, 0
0x00B0	0x00F2      	MOVWF      R2
0x00B1	0x0833      	MOVF       FARG_ADC_Read_channel, 0
0x00B2	0x00F0      	MOVWF      R0
0x00B3	0x0DF0      	RLF        R0, 1
0x00B4	0x1070      	BCF        R0, 0
0x00B5	0x0DF0      	RLF        R0, 1
0x00B6	0x1070      	BCF        R0, 0
0x00B7	0x0DF0      	RLF        R0, 1
0x00B8	0x1070      	BCF        R0, 0
0x00B9	0x0870      	MOVF       R0, 0
0x00BA	0x0472      	IORWF      R2, 0
0x00BB	0x009F      	MOVWF      ADCON0
;PIC1.c,96 :: 		ADCON0 |= 0x02;  // Start conversion
0x00BC	0x149F      	BSF        ADCON0, 1
;PIC1.c,97 :: 		while (ADCON0 & 0x02);  // Wait for conversion to complete
L_ADC_Read5:
0x00BD	0x1C9F      	BTFSS      ADCON0, 1
0x00BE	0x28C0      	GOTO       L_ADC_Read6
0x00BF	0x28BD      	GOTO       L_ADC_Read5
L_ADC_Read6:
;PIC1.c,98 :: 		return (ADRESH << 8) | ADRESL;  // Combine result
0x00C0	0x081E      	MOVF       ADRESH, 0
0x00C1	0x00F1      	MOVWF      R0+1
0x00C2	0x01F0      	CLRF       R0
0x00C3	0x1683      	BSF        STATUS, 5
0x00C4	0x081E      	MOVF       ADRESL, 0
0x00C5	0x04F0      	IORWF      R0, 1
0x00C6	0x3000      	MOVLW      0
0x00C7	0x04F1      	IORWF      R0+1, 1
;PIC1.c,99 :: 		}
L_end_ADC_Read:
0x00C8	0x0008      	RETURN
; end of _ADC_Read
_rotate_right:
;PIC1.c,122 :: 		void rotate_right() {
;PIC1.c,123 :: 		PORTC &= ~(LEFT_WHEEL_FORWARD | RIGHT_WHEEL_BACKWARD);
0x00C9	0x30D7      	MOVLW      215
0x00CA	0x1283      	BCF        STATUS, 5
0x00CB	0x1303      	BCF        STATUS, 6
0x00CC	0x0587      	ANDWF      PORTC, 1
;PIC1.c,124 :: 		PORTC |= LEFT_WHEEL_BACKWARD | RIGHT_WHEEL_FORWARD;
0x00CD	0x3041      	MOVLW      65
0x00CE	0x0487      	IORWF      PORTC, 1
;PIC1.c,125 :: 		set_pwm_duty_cycle(90);  // Set PWM duty cycle to 90%
0x00CF	0x305A      	MOVLW      90
0x00D0	0x00B5      	MOVWF      FARG_set_pwm_duty_cycle_duty
0x00D1	0x205D      	CALL       _set_pwm_duty_cycle
;PIC1.c,126 :: 		PORTC &= ~REVERSE_LED;  // Turn off reverse LED
0x00D2	0x1A07      	BTFSC      RC4_bit, BitPos(RC4_bit+0)
0x00D3	0x28D6      	GOTO       L__rotate_right53
0x00D4	0x1403      	BSF        STATUS, 0
0x00D5	0x28D7      	GOTO       L__rotate_right54
L__rotate_right53:
0x00D6	0x1003      	BCF        STATUS, 0
L__rotate_right54:
0x00D7	0x01F0      	CLRF       R0
0x00D8	0x1803      	BTFSC      STATUS, 0
0x00D9	0x0AF0      	INCF       R0, 1
0x00DA	0x0870      	MOVF       R0, 0
0x00DB	0x0587      	ANDWF      PORTC, 1
;PIC1.c,127 :: 		}
L_end_rotate_right:
0x00DC	0x0008      	RETURN
; end of _rotate_right
_stop_car:
;PIC1.c,129 :: 		void stop_car() {
;PIC1.c,130 :: 		PORTC &= ~(LEFT_WHEEL_FORWARD | LEFT_WHEEL_BACKWARD | RIGHT_WHEEL_FORWARD | RIGHT_WHEEL_BACKWARD);
0x00DD	0x3096      	MOVLW      150
0x00DE	0x1283      	BCF        STATUS, 5
0x00DF	0x1303      	BCF        STATUS, 6
0x00E0	0x0587      	ANDWF      PORTC, 1
;PIC1.c,131 :: 		}
L_end_stop_car:
0x00E1	0x0008      	RETURN
; end of _stop_car
_rotate_left:
;PIC1.c,115 :: 		void rotate_left() {
;PIC1.c,116 :: 		PORTC &= ~(RIGHT_WHEEL_FORWARD | LEFT_WHEEL_BACKWARD);
0x00E2	0x30BE      	MOVLW      190
0x00E3	0x1283      	BCF        STATUS, 5
0x00E4	0x1303      	BCF        STATUS, 6
0x00E5	0x0587      	ANDWF      PORTC, 1
;PIC1.c,117 :: 		PORTC |= RIGHT_WHEEL_BACKWARD | LEFT_WHEEL_FORWARD;
0x00E6	0x3028      	MOVLW      40
0x00E7	0x0487      	IORWF      PORTC, 1
;PIC1.c,118 :: 		set_pwm_duty_cycle(90);  // Set PWM duty cycle to 90%
0x00E8	0x305A      	MOVLW      90
0x00E9	0x00B5      	MOVWF      FARG_set_pwm_duty_cycle_duty
0x00EA	0x205D      	CALL       _set_pwm_duty_cycle
;PIC1.c,119 :: 		PORTC |= REVERSE_LED;  // Turn on reverse LED
0x00EB	0x01F0      	CLRF       R0
0x00EC	0x1A07      	BTFSC      RC4_bit, BitPos(RC4_bit+0)
0x00ED	0x0AF0      	INCF       R0, 1
0x00EE	0x0870      	MOVF       R0, 0
0x00EF	0x0487      	IORWF      PORTC, 1
;PIC1.c,120 :: 		}
L_end_rotate_left:
0x00F0	0x0008      	RETURN
; end of _rotate_left
_drive_forward:
;PIC1.c,101 :: 		void drive_forward() {
;PIC1.c,102 :: 		PORTC &= ~(LEFT_WHEEL_BACKWARD | RIGHT_WHEEL_BACKWARD);
0x00F1	0x30B7      	MOVLW      183
0x00F2	0x1283      	BCF        STATUS, 5
0x00F3	0x1303      	BCF        STATUS, 6
0x00F4	0x0587      	ANDWF      PORTC, 1
;PIC1.c,103 :: 		PORTC |= LEFT_WHEEL_FORWARD | RIGHT_WHEEL_FORWARD;
0x00F5	0x3021      	MOVLW      33
0x00F6	0x0487      	IORWF      PORTC, 1
;PIC1.c,104 :: 		set_pwm_duty_cycle(90);  // Set PWM duty cycle to 90%
0x00F7	0x305A      	MOVLW      90
0x00F8	0x00B5      	MOVWF      FARG_set_pwm_duty_cycle_duty
0x00F9	0x205D      	CALL       _set_pwm_duty_cycle
;PIC1.c,106 :: 		PORTC &= ~REVERSE_LED;  // Turn off reverse LED
0x00FA	0x1A07      	BTFSC      RC4_bit, BitPos(RC4_bit+0)
0x00FB	0x28FE      	GOTO       L__drive_forward48
0x00FC	0x1403      	BSF        STATUS, 0
0x00FD	0x28FF      	GOTO       L__drive_forward49
L__drive_forward48:
0x00FE	0x1003      	BCF        STATUS, 0
L__drive_forward49:
0x00FF	0x01F0      	CLRF       R0
0x0100	0x1803      	BTFSC      STATUS, 0
0x0101	0x0AF0      	INCF       R0, 1
0x0102	0x0870      	MOVF       R0, 0
0x0103	0x0587      	ANDWF      PORTC, 1
;PIC1.c,107 :: 		}
L_end_drive_forward:
0x0104	0x0008      	RETURN
; end of _drive_forward
_msDelay:
;PIC1.c,133 :: 		void msDelay(unsigned int msCnt) {
;PIC1.c,135 :: 		for (ms = 0; ms < msCnt; ms++) {
0x0105	0x1283      	BCF        STATUS, 5
0x0106	0x1303      	BCF        STATUS, 6
0x0107	0x01F3      	CLRF       R3
0x0108	0x01F4      	CLRF       R3+1
L_msDelay7:
0x0109	0x0834      	MOVF       FARG_msDelay_msCnt+1, 0
0x010A	0x0274      	SUBWF      R3+1, 0
0x010B	0x1D03      	BTFSS      STATUS, 2
0x010C	0x290F      	GOTO       L__msDelay57
0x010D	0x0833      	MOVF       FARG_msDelay_msCnt, 0
0x010E	0x0273      	SUBWF      R3, 0
L__msDelay57:
0x010F	0x1803      	BTFSC      STATUS, 0
0x0110	0x2923      	GOTO       L_msDelay8
;PIC1.c,137 :: 		for (cc = 0; cc < 155; cc++);
0x0111	0x01F1      	CLRF       R1
0x0112	0x01F2      	CLRF       R1+1
L_msDelay10:
0x0113	0x3000      	MOVLW      0
0x0114	0x0272      	SUBWF      R1+1, 0
0x0115	0x1D03      	BTFSS      STATUS, 2
0x0116	0x2919      	GOTO       L__msDelay58
0x0117	0x309B      	MOVLW      155
0x0118	0x0271      	SUBWF      R1, 0
L__msDelay58:
0x0119	0x1803      	BTFSC      STATUS, 0
0x011A	0x291F      	GOTO       L_msDelay11
0x011B	0x0AF1      	INCF       R1, 1
0x011C	0x1903      	BTFSC      STATUS, 2
0x011D	0x0AF2      	INCF       R1+1, 1
0x011E	0x2913      	GOTO       L_msDelay10
L_msDelay11:
;PIC1.c,135 :: 		for (ms = 0; ms < msCnt; ms++) {
0x011F	0x0AF3      	INCF       R3, 1
0x0120	0x1903      	BTFSC      STATUS, 2
0x0121	0x0AF4      	INCF       R3+1, 1
;PIC1.c,138 :: 		}
0x0122	0x2909      	GOTO       L_msDelay7
L_msDelay8:
;PIC1.c,139 :: 		}
L_end_msDelay:
0x0123	0x0008      	RETURN
; end of _msDelay
_drive_backward:
;PIC1.c,109 :: 		void drive_backward() {
;PIC1.c,110 :: 		PORTC &= ~(LEFT_WHEEL_FORWARD | RIGHT_WHEEL_FORWARD);
0x0124	0x30DE      	MOVLW      222
0x0125	0x1283      	BCF        STATUS, 5
0x0126	0x1303      	BCF        STATUS, 6
0x0127	0x0587      	ANDWF      PORTC, 1
;PIC1.c,111 :: 		PORTC |= LEFT_WHEEL_BACKWARD | RIGHT_WHEEL_BACKWARD;
0x0128	0x3048      	MOVLW      72
0x0129	0x0487      	IORWF      PORTC, 1
;PIC1.c,112 :: 		PORTC |= REVERSE_LED;  // Turn on reverse LED
0x012A	0x01F0      	CLRF       R0
0x012B	0x1A07      	BTFSC      RC4_bit, BitPos(RC4_bit+0)
0x012C	0x0AF0      	INCF       R0, 1
0x012D	0x0870      	MOVF       R0, 0
0x012E	0x0487      	IORWF      PORTC, 1
;PIC1.c,113 :: 		}
L_end_drive_backward:
0x012F	0x0008      	RETURN
; end of _drive_backward
_main:
;PIC1.c,141 :: 		void main() {
;PIC1.c,143 :: 		int motion_detected = 0;
0x0130	0x1283      	BCF        STATUS, 5
0x0131	0x1303      	BCF        STATUS, 6
0x0132	0x01AF      	CLRF       main_motion_detected_L0
0x0133	0x01B0      	CLRF       main_motion_detected_L0+1
0x0134	0x01B1      	CLRF       main_buzzeri_state_L0
0x0135	0x01B2      	CLRF       main_buzzeri_state_L0+1
;PIC1.c,146 :: 		init_ADC();
0x0136	0x2084      	CALL       _init_ADC
;PIC1.c,147 :: 		init_PWM();
0x0137	0x2098      	CALL       _init_PWM
;PIC1.c,148 :: 		init_interrupts();
0x0138	0x20A5      	CALL       _init_interrupts
;PIC1.c,150 :: 		while (1) {
L_main13:
;PIC1.c,151 :: 		x_value = ADC_Read(2);  // Read X-axis joystick
0x0139	0x3002      	MOVLW      2
0x013A	0x1283      	BCF        STATUS, 5
0x013B	0x00B3      	MOVWF      FARG_ADC_Read_channel
0x013C	0x20AC      	CALL       _ADC_Read
0x013D	0x0870      	MOVF       R0, 0
0x013E	0x1283      	BCF        STATUS, 5
0x013F	0x00AA      	MOVWF      main_x_value_L0
0x0140	0x0871      	MOVF       R0+1, 0
0x0141	0x00AB      	MOVWF      main_x_value_L0+1
;PIC1.c,152 :: 		y_value = ADC_Read(3);  // Read Y-axis joystick
0x0142	0x3003      	MOVLW      3
0x0143	0x00B3      	MOVWF      FARG_ADC_Read_channel
0x0144	0x20AC      	CALL       _ADC_Read
0x0145	0x0870      	MOVF       R0, 0
0x0146	0x1283      	BCF        STATUS, 5
0x0147	0x00AC      	MOVWF      main_y_value_L0
0x0148	0x0871      	MOVF       R0+1, 0
0x0149	0x00AD      	MOVWF      main_y_value_L0+1
;PIC1.c,154 :: 		if (x_value > 700) {
0x014A	0x3080      	MOVLW      128
0x014B	0x3A02      	XORLW      2
0x014C	0x00F0      	MOVWF      R0
0x014D	0x3080      	MOVLW      128
0x014E	0x062B      	XORWF      main_x_value_L0+1, 0
0x014F	0x0270      	SUBWF      R0, 0
0x0150	0x1D03      	BTFSS      STATUS, 2
0x0151	0x2954      	GOTO       L__main60
0x0152	0x082A      	MOVF       main_x_value_L0, 0
0x0153	0x3CBC      	SUBLW      188
L__main60:
0x0154	0x1803      	BTFSC      STATUS, 0
0x0155	0x2958      	GOTO       L_main15
;PIC1.c,155 :: 		rotate_right();
0x0156	0x20C9      	CALL       _rotate_right
;PIC1.c,156 :: 		} else if (x_value < 300) {
0x0157	0x2983      	GOTO       L_main16
L_main15:
0x0158	0x3080      	MOVLW      128
0x0159	0x062B      	XORWF      main_x_value_L0+1, 0
0x015A	0x00F0      	MOVWF      R0
0x015B	0x3080      	MOVLW      128
0x015C	0x3A01      	XORLW      1
0x015D	0x0270      	SUBWF      R0, 0
0x015E	0x1D03      	BTFSS      STATUS, 2
0x015F	0x2962      	GOTO       L__main61
0x0160	0x302C      	MOVLW      44
0x0161	0x022A      	SUBWF      main_x_value_L0, 0
L__main61:
0x0162	0x1803      	BTFSC      STATUS, 0
0x0163	0x2966      	GOTO       L_main17
;PIC1.c,157 :: 		rotate_left();
0x0164	0x20E2      	CALL       _rotate_left
;PIC1.c,158 :: 		} else if (y_value < 300) {
0x0165	0x2983      	GOTO       L_main18
L_main17:
0x0166	0x3080      	MOVLW      128
0x0167	0x062D      	XORWF      main_y_value_L0+1, 0
0x0168	0x00F0      	MOVWF      R0
0x0169	0x3080      	MOVLW      128
0x016A	0x3A01      	XORLW      1
0x016B	0x0270      	SUBWF      R0, 0
0x016C	0x1D03      	BTFSS      STATUS, 2
0x016D	0x2970      	GOTO       L__main62
0x016E	0x302C      	MOVLW      44
0x016F	0x022C      	SUBWF      main_y_value_L0, 0
L__main62:
0x0170	0x1803      	BTFSC      STATUS, 0
0x0171	0x2974      	GOTO       L_main19
;PIC1.c,159 :: 		drive_backward();
0x0172	0x2124      	CALL       _drive_backward
;PIC1.c,160 :: 		} else if (y_value > 700) {
0x0173	0x2983      	GOTO       L_main20
L_main19:
0x0174	0x3080      	MOVLW      128
0x0175	0x3A02      	XORLW      2
0x0176	0x00F0      	MOVWF      R0
0x0177	0x3080      	MOVLW      128
0x0178	0x062D      	XORWF      main_y_value_L0+1, 0
0x0179	0x0270      	SUBWF      R0, 0
0x017A	0x1D03      	BTFSS      STATUS, 2
0x017B	0x297E      	GOTO       L__main63
0x017C	0x082C      	MOVF       main_y_value_L0, 0
0x017D	0x3CBC      	SUBLW      188
L__main63:
0x017E	0x1803      	BTFSC      STATUS, 0
0x017F	0x2982      	GOTO       L_main21
;PIC1.c,161 :: 		drive_forward();
0x0180	0x20F1      	CALL       _drive_forward
;PIC1.c,162 :: 		} else {
0x0181	0x2983      	GOTO       L_main22
L_main21:
;PIC1.c,163 :: 		stop_car();
0x0182	0x20DD      	CALL       _stop_car
;PIC1.c,164 :: 		}
L_main22:
L_main20:
L_main18:
L_main16:
;PIC1.c,166 :: 		ldrValue = ADC_Read(0);  // Read LDR value
0x0183	0x01B3      	CLRF       FARG_ADC_Read_channel
0x0184	0x20AC      	CALL       _ADC_Read
0x0185	0x0870      	MOVF       R0, 0
0x0186	0x1283      	BCF        STATUS, 5
0x0187	0x00A4      	MOVWF      _ldrValue
0x0188	0x0871      	MOVF       R0+1, 0
0x0189	0x00A5      	MOVWF      _ldrValue+1
;PIC1.c,167 :: 		if (ldrValue < 512) {
0x018A	0x3002      	MOVLW      2
0x018B	0x0271      	SUBWF      R0+1, 0
0x018C	0x1D03      	BTFSS      STATUS, 2
0x018D	0x2990      	GOTO       L__main64
0x018E	0x3000      	MOVLW      0
0x018F	0x0270      	SUBWF      R0, 0
L__main64:
0x0190	0x1803      	BTFSC      STATUS, 0
0x0191	0x29A7      	GOTO       L_main23
;PIC1.c,168 :: 		PORTB |= (LED1 | LED2 | LED3 | LED4);  // Turn on all LEDs
0x0192	0x01F1      	CLRF       R1
0x0193	0x1A06      	BTFSC      RB4_bit, BitPos(RB4_bit+0)
0x0194	0x0AF1      	INCF       R1, 1
0x0195	0x01F0      	CLRF       R0
0x0196	0x1A86      	BTFSC      RB5_bit, BitPos(RB5_bit+0)
0x0197	0x0AF0      	INCF       R0, 1
0x0198	0x0870      	MOVF       R0, 0
0x0199	0x04F1      	IORWF      R1, 1
0x019A	0x01F0      	CLRF       R0
0x019B	0x1B06      	BTFSC      RB6_bit, BitPos(RB6_bit+0)
0x019C	0x0AF0      	INCF       R0, 1
0x019D	0x0870      	MOVF       R0, 0
0x019E	0x04F1      	IORWF      R1, 1
0x019F	0x01F0      	CLRF       R0
0x01A0	0x1B86      	BTFSC      RB7_bit, BitPos(RB7_bit+0)
0x01A1	0x0AF0      	INCF       R0, 1
0x01A2	0x0871      	MOVF       R1, 0
0x01A3	0x04F0      	IORWF      R0, 1
0x01A4	0x0870      	MOVF       R0, 0
0x01A5	0x0486      	IORWF      PORTB, 1
;PIC1.c,169 :: 		} else {
0x01A6	0x29BC      	GOTO       L_main24
L_main23:
;PIC1.c,170 :: 		PORTB &= ~(LED1 | LED2 | LED3 | LED4); // Turn off all LEDs
0x01A7	0x01F1      	CLRF       R1
0x01A8	0x1A06      	BTFSC      RB4_bit, BitPos(RB4_bit+0)
0x01A9	0x0AF1      	INCF       R1, 1
0x01AA	0x01F0      	CLRF       R0
0x01AB	0x1A86      	BTFSC      RB5_bit, BitPos(RB5_bit+0)
0x01AC	0x0AF0      	INCF       R0, 1
0x01AD	0x0870      	MOVF       R0, 0
0x01AE	0x04F1      	IORWF      R1, 1
0x01AF	0x01F0      	CLRF       R0
0x01B0	0x1B06      	BTFSC      RB6_bit, BitPos(RB6_bit+0)
0x01B1	0x0AF0      	INCF       R0, 1
0x01B2	0x0870      	MOVF       R0, 0
0x01B3	0x04F1      	IORWF      R1, 1
0x01B4	0x01F0      	CLRF       R0
0x01B5	0x1B86      	BTFSC      RB7_bit, BitPos(RB7_bit+0)
0x01B6	0x0AF0      	INCF       R0, 1
0x01B7	0x0871      	MOVF       R1, 0
0x01B8	0x04F0      	IORWF      R0, 1
0x01B9	0x09F0      	COMF       R0, 1
0x01BA	0x0870      	MOVF       R0, 0
0x01BB	0x0586      	ANDWF      PORTB, 1
;PIC1.c,171 :: 		}
L_main24:
;PIC1.c,173 :: 		if (FLAME_DETECTOR) {    // Flame detected
0x01BC	0x1D86      	BTFSS      RB3_bit, BitPos(RB3_bit+0)
0x01BD	0x29E2      	GOTO       L_main25
;PIC1.c,174 :: 		FLAME_LED = 1;       // Turn on flame indicator LED
0x01BE	0x1506      	BSF        RB2_bit, BitPos(RB2_bit+0)
;PIC1.c,175 :: 		BLUE_LED = 0;
0x01BF	0x1086      	BCF        RB1_bit, BitPos(RB1_bit+0)
;PIC1.c,176 :: 		while(FLAME_DETECTOR){
L_main26:
0x01C0	0x1D86      	BTFSS      RB3_bit, BitPos(RB3_bit+0)
0x01C1	0x29E1      	GOTO       L_main27
;PIC1.c,177 :: 		RD7_bit=1;
0x01C2	0x1788      	BSF        RD7_bit, BitPos(RD7_bit+0)
;PIC1.c,178 :: 		delay_ms(300);
0x01C3	0x3004      	MOVLW      4
0x01C4	0x00FB      	MOVWF      R11
0x01C5	0x300C      	MOVLW      12
0x01C6	0x00FC      	MOVWF      R12
0x01C7	0x3033      	MOVLW      51
0x01C8	0x00FD      	MOVWF      R13
L_main28:
0x01C9	0x0BFD      	DECFSZ     R13, 1
0x01CA	0x29C9      	GOTO       L_main28
0x01CB	0x0BFC      	DECFSZ     R12, 1
0x01CC	0x29C9      	GOTO       L_main28
0x01CD	0x0BFB      	DECFSZ     R11, 1
0x01CE	0x29C9      	GOTO       L_main28
0x01CF	0x0000      	NOP
0x01D0	0x0000      	NOP
;PIC1.c,179 :: 		RD7_bit=0;
0x01D1	0x1388      	BCF        RD7_bit, BitPos(RD7_bit+0)
;PIC1.c,180 :: 		delay_ms(300);
0x01D2	0x3004      	MOVLW      4
0x01D3	0x00FB      	MOVWF      R11
0x01D4	0x300C      	MOVLW      12
0x01D5	0x00FC      	MOVWF      R12
0x01D6	0x3033      	MOVLW      51
0x01D7	0x00FD      	MOVWF      R13
L_main29:
0x01D8	0x0BFD      	DECFSZ     R13, 1
0x01D9	0x29D8      	GOTO       L_main29
0x01DA	0x0BFC      	DECFSZ     R12, 1
0x01DB	0x29D8      	GOTO       L_main29
0x01DC	0x0BFB      	DECFSZ     R11, 1
0x01DD	0x29D8      	GOTO       L_main29
0x01DE	0x0000      	NOP
0x01DF	0x0000      	NOP
;PIC1.c,182 :: 		}} else {                 // No flame detected
0x01E0	0x29C0      	GOTO       L_main26
L_main27:
0x01E1	0x29E5      	GOTO       L_main30
L_main25:
;PIC1.c,183 :: 		FLAME_LED = 0;       // Turn off flame indicator LED
0x01E2	0x1106      	BCF        RB2_bit, BitPos(RB2_bit+0)
;PIC1.c,184 :: 		BLUE_LED = 1;
0x01E3	0x1486      	BSF        RB1_bit, BitPos(RB1_bit+0)
;PIC1.c,185 :: 		RD7_bit=0;        // Turn on blue LED (no flame indicator)
0x01E4	0x1388      	BCF        RD7_bit, BitPos(RD7_bit+0)
;PIC1.c,186 :: 		}
L_main30:
;PIC1.c,189 :: 		motion_detected = 0;
0x01E5	0x01AF      	CLRF       main_motion_detected_L0
0x01E6	0x01B0      	CLRF       main_motion_detected_L0+1
;PIC1.c,190 :: 		if (PORTD & MOTION_DETECTOR) {
0x01E7	0x01F0      	CLRF       R0
0x01E8	0x1A08      	BTFSC      RD4_bit, BitPos(RD4_bit+0)
0x01E9	0x0AF0      	INCF       R0, 1
0x01EA	0x0808      	MOVF       PORTD, 0
0x01EB	0x05F0      	ANDWF      R0, 1
0x01EC	0x1903      	BTFSC      STATUS, 2
0x01ED	0x29FE      	GOTO       L_main31
;PIC1.c,191 :: 		msDelay(10);
0x01EE	0x300A      	MOVLW      10
0x01EF	0x00B3      	MOVWF      FARG_msDelay_msCnt
0x01F0	0x3000      	MOVLW      0
0x01F1	0x00B4      	MOVWF      FARG_msDelay_msCnt+1
0x01F2	0x2105      	CALL       _msDelay
;PIC1.c,192 :: 		if (PORTD & MOTION_DETECTOR) {
0x01F3	0x01F0      	CLRF       R0
0x01F4	0x1A08      	BTFSC      RD4_bit, BitPos(RD4_bit+0)
0x01F5	0x0AF0      	INCF       R0, 1
0x01F6	0x0808      	MOVF       PORTD, 0
0x01F7	0x05F0      	ANDWF      R0, 1
0x01F8	0x1903      	BTFSC      STATUS, 2
0x01F9	0x29FE      	GOTO       L_main32
;PIC1.c,193 :: 		motion_detected = 1;
0x01FA	0x3001      	MOVLW      1
0x01FB	0x00AF      	MOVWF      main_motion_detected_L0
0x01FC	0x3000      	MOVLW      0
0x01FD	0x00B0      	MOVWF      main_motion_detected_L0+1
;PIC1.c,194 :: 		}
L_main32:
;PIC1.c,195 :: 		}
L_main31:
;PIC1.c,196 :: 		PORTD = (PORTD & ~MLED) | (motion_detected ? MLED : 0);
0x01FE	0x1A88      	BTFSC      RD5_bit, BitPos(RD5_bit+0)
0x01FF	0x2A02      	GOTO       L__main65
0x0200	0x1403      	BSF        STATUS, 0
0x0201	0x2A03      	GOTO       L__main66
L__main65:
0x0202	0x1003      	BCF        STATUS, 0
L__main66:
0x0203	0x01F0      	CLRF       R0
0x0204	0x1803      	BTFSC      STATUS, 0
0x0205	0x0AF0      	INCF       R0, 1
0x0206	0x0870      	MOVF       R0, 0
0x0207	0x0508      	ANDWF      PORTD, 0
0x0208	0x00F1      	MOVWF      R1
0x0209	0x082F      	MOVF       main_motion_detected_L0, 0
0x020A	0x0430      	IORWF      main_motion_detected_L0+1, 0
0x020B	0x1903      	BTFSC      STATUS, 2
0x020C	0x2A13      	GOTO       L_main33
0x020D	0x1A88      	BTFSC      RD5_bit, BitPos(RD5_bit+0)
0x020E	0x2A11      	GOTO       L__main67
0x020F	0x102E      	BCF        ?FLOC___mainT82, BitPos(?FLOC___mainT82+0)
0x0210	0x2A12      	GOTO       L__main68
L__main67:
0x0211	0x142E      	BSF        ?FLOC___mainT82, BitPos(?FLOC___mainT82+0)
L__main68:
0x0212	0x2A14      	GOTO       L_main34
L_main33:
0x0213	0x102E      	BCF        ?FLOC___mainT82, BitPos(?FLOC___mainT82+0)
L_main34:
0x0214	0x01F0      	CLRF       R0
0x0215	0x182E      	BTFSC      ?FLOC___mainT82, BitPos(?FLOC___mainT82+0)
0x0216	0x0AF0      	INCF       R0, 1
0x0217	0x0870      	MOVF       R0, 0
0x0218	0x0471      	IORWF      R1, 0
0x0219	0x0088      	MOVWF      PORTD
;PIC1.c,198 :: 		buzzeri_state = 0;
0x021A	0x01B1      	CLRF       main_buzzeri_state_L0
0x021B	0x01B2      	CLRF       main_buzzeri_state_L0+1
;PIC1.c,199 :: 		if (PORTD & BUZZERI) {
0x021C	0x01F0      	CLRF       R0
0x021D	0x1B08      	BTFSC      RD6_bit, BitPos(RD6_bit+0)
0x021E	0x0AF0      	INCF       R0, 1
0x021F	0x0808      	MOVF       PORTD, 0
0x0220	0x05F0      	ANDWF      R0, 1
0x0221	0x1903      	BTFSC      STATUS, 2
0x0222	0x2A33      	GOTO       L_main35
;PIC1.c,200 :: 		msDelay(10);
0x0223	0x300A      	MOVLW      10
0x0224	0x00B3      	MOVWF      FARG_msDelay_msCnt
0x0225	0x3000      	MOVLW      0
0x0226	0x00B4      	MOVWF      FARG_msDelay_msCnt+1
0x0227	0x2105      	CALL       _msDelay
;PIC1.c,201 :: 		if (PORTD & BUZZERI) {
0x0228	0x01F0      	CLRF       R0
0x0229	0x1B08      	BTFSC      RD6_bit, BitPos(RD6_bit+0)
0x022A	0x0AF0      	INCF       R0, 1
0x022B	0x0808      	MOVF       PORTD, 0
0x022C	0x05F0      	ANDWF      R0, 1
0x022D	0x1903      	BTFSC      STATUS, 2
0x022E	0x2A33      	GOTO       L_main36
;PIC1.c,202 :: 		buzzeri_state = 1;
0x022F	0x3001      	MOVLW      1
0x0230	0x00B1      	MOVWF      main_buzzeri_state_L0
0x0231	0x3000      	MOVLW      0
0x0232	0x00B2      	MOVWF      main_buzzeri_state_L0+1
;PIC1.c,203 :: 		}
L_main36:
;PIC1.c,204 :: 		}
L_main35:
;PIC1.c,205 :: 		PORTB = (PORTB & ~BUZZER) | (buzzeri_state ? BUZZER : 0);
0x0233	0x1806      	BTFSC      RB0_bit, BitPos(RB0_bit+0)
0x0234	0x2A37      	GOTO       L__main69
0x0235	0x1403      	BSF        STATUS, 0
0x0236	0x2A38      	GOTO       L__main70
L__main69:
0x0237	0x1003      	BCF        STATUS, 0
L__main70:
0x0238	0x01F0      	CLRF       R0
0x0239	0x1803      	BTFSC      STATUS, 0
0x023A	0x0AF0      	INCF       R0, 1
0x023B	0x0870      	MOVF       R0, 0
0x023C	0x0506      	ANDWF      PORTB, 0
0x023D	0x00F1      	MOVWF      R1
0x023E	0x0831      	MOVF       main_buzzeri_state_L0, 0
0x023F	0x0432      	IORWF      main_buzzeri_state_L0+1, 0
0x0240	0x1903      	BTFSC      STATUS, 2
0x0241	0x2A48      	GOTO       L_main37
0x0242	0x1806      	BTFSC      RB0_bit, BitPos(RB0_bit+0)
0x0243	0x2A46      	GOTO       L__main71
0x0244	0x10AE      	BCF        ?FLOC___mainT92, BitPos(?FLOC___mainT92+0)
0x0245	0x2A47      	GOTO       L__main72
L__main71:
0x0246	0x14AE      	BSF        ?FLOC___mainT92, BitPos(?FLOC___mainT92+0)
L__main72:
0x0247	0x2A49      	GOTO       L_main38
L_main37:
0x0248	0x10AE      	BCF        ?FLOC___mainT92, BitPos(?FLOC___mainT92+0)
L_main38:
0x0249	0x01F0      	CLRF       R0
0x024A	0x18AE      	BTFSC      ?FLOC___mainT92, BitPos(?FLOC___mainT92+0)
0x024B	0x0AF0      	INCF       R0, 1
0x024C	0x0870      	MOVF       R0, 0
0x024D	0x0471      	IORWF      R1, 0
0x024E	0x0086      	MOVWF      PORTB
;PIC1.c,207 :: 		msDelay(100);
0x024F	0x3064      	MOVLW      100
0x0250	0x00B3      	MOVWF      FARG_msDelay_msCnt
0x0251	0x3000      	MOVLW      0
0x0252	0x00B4      	MOVWF      FARG_msDelay_msCnt+1
0x0253	0x2105      	CALL       _msDelay
;PIC1.c,208 :: 		}
0x0254	0x2939      	GOTO       L_main13
;PIC1.c,209 :: 		}
L_end_main:
0x0255	0x2A55      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [64]    _interrupt
0x0044      [25]    _Mul_8X8_U
0x005D      [39]    _set_pwm_duty_cycle
0x0084      [20]    _init_ADC
0x0098      [13]    _init_PWM
0x00A5       [7]    _init_interrupts
0x00AC      [29]    _ADC_Read
0x00C9      [20]    _rotate_right
0x00DD       [5]    _stop_car
0x00E2      [15]    _rotate_left
0x00F1      [20]    _drive_forward
0x0105      [31]    _msDelay
0x0124      [12]    _drive_backward
0x0130     [294]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    RB5_bit
0x0006       [0]    RB4_bit
0x0006       [0]    RB6_bit
0x0006       [1]    PORTB
0x0006       [0]    RB7_bit
0x0006       [0]    RB1_bit
0x0006       [0]    RB0_bit
0x0006       [0]    RB3_bit
0x0006       [0]    RB2_bit
0x0007       [1]    PORTC
0x0007       [0]    RC4_bit
0x0008       [0]    RD6_bit
0x0008       [0]    RD5_bit
0x0008       [1]    PORTD
0x0008       [0]    RD7_bit
0x0008       [0]    RD4_bit
0x000A       [1]    PCLATH
0x000B       [0]    INTE_bit
0x000B       [0]    GIE_bit
0x000B       [1]    INTCON
0x0011       [1]    TMR2
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0024       [2]    _ldrValue
0x0026       [2]    ___DoICPAddr
0x0028       [1]    ___saveSTATUS
0x0029       [1]    ___savePCLATH
0x002A       [2]    main_x_value_L0
0x002C       [2]    main_y_value_L0
0x002E       [0]    ?FLOC___mainT92
0x002E       [0]    ?FLOC___mainT82
0x002F       [2]    main_motion_detected_L0
0x0031       [2]    main_buzzeri_state_L0
0x0033       [2]    FARG_msDelay_msCnt
0x0033       [1]    FARG_ADC_Read_channel
0x0035       [1]    FARG_set_pwm_duty_cycle_duty
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [0]    INTEDG_bit
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x0092       [1]    PR2
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
